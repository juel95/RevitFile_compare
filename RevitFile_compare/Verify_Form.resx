<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFMT
        Aw5YFgTcUxQD/1MUA/9TFAP/UxQD/1MUA/9bGQb/dSsT/3kvF/9+NRz0fjUcJAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFMUAwZTFANoUxQD4lMUA/9TFAP/UxQD/1QVA/90KhL/eTAX/341HGwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTFAMIUxQDblMUA+ZTFAP/UhMC/3AnEP95Lxe8fjUcAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUxQDClMUA3ZTFAPqaSMN9nUr
        EyIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFMU
        Aw5fHAhEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4P/+/8D/+H/g/+B/4P+Af+B+AP/geAH/4HAD/+AAA//gA
        Af/8AAP//AAH//wAD//8AB///AA///4AD//+AAf//gAD//4AA//+AAP//gAD//4AB///AA///wAf//8A
        H///AD///8B////wf////P////////////8=
</value>
  </data>
</root>